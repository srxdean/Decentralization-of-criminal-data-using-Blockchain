/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
*/
package wit.crime;
import java.io.IOException;
import java.security.*;
import java.util.Base64;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.ArrayList;

/**
 *
 * @author Shubham369
 */
public class CaseReport implements DataItem{
    public static  String caseno = "123";
    public static String state = "maharashtra";
    public static String district = "SOlapur";
    public static String taluka = "solapur";
    public static String city = "solapur";
    public static String policestation = "ashok chowk";
    
//    public ...
}

class Verification extends CaseReport{

    private PrivateKey privateKey;
    private PublicKey publicKey;
    
    public static byte[] getSHA(String input) throws NoSuchAlgorithmException 
    {  
        // Static getInstance method is called with hashing SHA  
        MessageDigest md = MessageDigest.getInstance("SHA-256");  
  
        // digest() method called  
        // to calculate message digest of an input  
        // and return array of byte 
        return md.digest(input.getBytes(StandardCharsets.UTF_8));  
    } 
    
    public static String toHexString(byte[] hash) 
    { 
        // Convert byte array into signum representation  
        BigInteger number = new BigInteger(1, hash);  
  
        // Convert message digest into hex value  
        StringBuilder hexString = new StringBuilder(number.toString(16));  
  
        // Pad with leading zeros 
        while (hexString.length() < 32)  
        {  
            hexString.insert(0, '0');  
        }  
  
        return hexString.toString();  
    } 
    
    
    
  
    // Driver code  
      
    
}
class RSAKeyPairGenerator extends Verification{

    private PrivateKey privateKey;
    private PublicKey publicKey;

    public RSAKeyPairGenerator() throws NoSuchAlgorithmException {
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
        keyGen.initialize(1024);
        KeyPair pair = keyGen.generateKeyPair();
        this.privateKey = pair.getPrivate();
        this.publicKey = pair.getPublic();
    }

    public PrivateKey getPrivateKey() {
        return privateKey;
    }

    public PublicKey getPublicKey() {
        return publicKey;
    }
    
    public static void main(String[] args) throws NoSuchAlgorithmException, IOException 
    {
        
        System.out.println("HashCode Generated by SHA-256 for:");  
  
              
            System.out.println("\n"+ caseno.toUpperCase()+ " : " + toHexString(getSHA(caseno.toUpperCase())));  
            System.out.println("\n"+ state.toUpperCase()+ " : " + toHexString(getSHA(state.toUpperCase())));  
            System.out.println("\n"+ district.toUpperCase()+ " : " + toHexString(getSHA(district.toUpperCase())));  
            System.out.println("\n"+ taluka.toUpperCase()+ " : " + toHexString(getSHA(taluka.toUpperCase())));  
            System.out.println("\n"+ city.toUpperCase()+ " : " + toHexString(getSHA(city.toUpperCase())));  
            
            String sha_caseno=(String)toHexString(getSHA(caseno.toUpperCase()));
            String sha_state=(String)toHexString(getSHA(state.toUpperCase()));
            String sha_district=(String)toHexString(getSHA(district.toUpperCase()));
            String sha_taluka=(String)toHexString(getSHA(taluka.toUpperCase()));
            String sha_city=(String)toHexString(getSHA(city.toUpperCase()));
            
            
        
        RSAKeyPairGenerator keyPairGenerator = new RSAKeyPairGenerator();
        
        
        System.out.println("\n"+"Public Key: "+Base64.getEncoder().encodeToString(keyPairGenerator.getPublicKey().getEncoded()));
        System.out.println("\n"+"Private Key:" +Base64.getEncoder().encodeToString(keyPairGenerator.getPrivateKey().getEncoded()));
    }
}